package api;

import java.util.NavigableMap;

import org.json.*;
import org.restlet.representation.*;
import org.restlet.ext.json.*;
import org.restlet.resource.*;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

import org.restlet.ext.jackson.*;


import gameServer.GameMachine;

public class GameServerResource extends ServerResource {

	GameMachine machine = GameMachine.getInstance();

	@Get
	public Representation get(JsonRepresentation jsonRep) {

		return post(jsonRep);
	}

	@Post
	public Representation post(JsonRepresentation jsonRep) {

		JSONObject json = jsonRep.getJsonObject();
		JSONObject response = null;

		String action = json.getString("action");

		System.out.println("action: " + action);
		
		this.machine.setAck("false");

		if (action.equals("registerPlayer")) {
			String playerName = json.getString("playerName");
			machine.registerPlayer(playerName);

			response = new JSONObject();
			response.put("playerName", playerName);
			response.put("ack", machine.getAck());
		}
		if (action.equals("setLevel")) {
			String playerName = json.getString("playerName");
			String level = json.getString("level");
			machine.setLevel(playerName, level);

			response = new JSONObject();
			response.put("playerName", playerName);
			response.put("level", machine.getPlayerNameLevel().get(playerName));
			response.put("ack", machine.getAck());
		}
		if (action.equals("setScore")) {
			String playerName = json.getString("playerName");
			int correctScore = json.getInt("correctScore");
			int time = json.getInt("time");

			String score = machine.calculateScore(correctScore, time);
			machine.setScore(playerName, score);

			response = new JSONObject();
			response.put("score", machine.getPlayerNameScore().get(playerName));
			response.put("ack", machine.getAck());
		}
		if (action.equals("getHighScore")) {
			NavigableMap<String, String> highScore = machine.getHigScore().descendingMap();
			response = new JSONObject();
			try {
				String map = new ObjectMapper().writeValueAsString(highScore);
				response.put("map", map);
			} catch (JsonProcessingException e) {
				System.out.println("api can convert map to json");
			}
			
			response.put("ack", machine.getAck());
		}

		return new JsonRepresentation(response);

	}
}
